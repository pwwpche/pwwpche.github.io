---
layout: post
title:  "Some Interesting Visiting order of FindBugs 0.5.2"
date:   2015-7-9
tags:
- Lab
- FindBugs
---


### This is the answer to the question yesterday.
FindBugs has a really complex program structure...much more complex than any program I've ever wrote (to be honest, I've not written too much code LOL).

####Here is the architecture:
* BytecodeScanningDetector.visitClassContext()
* -> JavaClass.accept(Visitor v) [1]
* -> PreorderVisitor.visitJavaClass(JavaClass obj)[2]
* -> Code.accept(Visitor v)
* -> PreorderVisitor.visitCode(Code obj)
* -> BetterVisitor.visitCode(Code obj)
* -> DismantleByteCode.visit(Code obj)


[1]Visitor v is of class edu.umd.cs.findbugs.FindSpinLoop<br>
FindSpinLoop(contains no visitJavaClass()) extends 
=>BytecodeScanningDetector(contains no visitJavaClass())  extends
=>=>DismantleBytecode(contains no visitJavaClass())  extends 
=>=>=>PreorderVisitor(contains visitJavaClass()) 
so, moving through the chain of extends, we can finally approach the visitJavaClass() method. 

[2] Assume that we are visiting some Code

####[3]Hmmm...This is interesting...
* Remember that Code.accept() called visitCode(), which FindSpinLoop doesn't have, and which PreorderVisitor does have. 
* But PreorderVisitor called super.visitCode(), and its super class, BetterVisitor, called visit(Code obj), which both BetterVisitor and FindSpinLoop have. 
* In this situation, Java decides that the most concrete class, FindSpinLoop, should be called. 
* FindSpinLoop called super.visit(Code obj), which BytecodeScanningDetector doesn't have, and DismantleByteCode has. 
* So finally, DismantleByteCode.visit(Code obj) is called. 

What a lovely structure...I'm not serious...And here is a simple code snippet to illustrate this:

{% highlight ruby %}
public interface MyInterface {
    public void me();
}

public abstract class AbstractTest implements MyInterface{
    public void me(){
        System.out.println("me in abstractTest");
        me2();
    }
    public void me2(){
        System.out.println("me2");
    }
}

public class ConcreteTest extends AbstractTest{
    public void me3(){
        System.out.println("Concrete Me3()");
    }
    public void me2(){
        System.out.println("Concrete Me2()");
    }
}

public class MyTest {
    public static void main(String[] args){
        ConcreteTest test = new ConcreteTest();
        testing(test);
    }
    public static void testing(MyInterface myInterface){
        myInterface.me();
    }
}

{% endhighlight %}

Result of the program:<br>
me in abstractTest<br>
Concrete Me2()

